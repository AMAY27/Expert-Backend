import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Date, Document } from 'mongoose';
import { Comment, CommentSchema } from './comment.schema';
import { PatternPhaseType } from '../enum/pattern-phase.enum';
import { ExpertVerificationPhase } from '../enum/expert-verification-phase.enum';

export class Verification {
  @Prop({ required: true })
  expertId: string;

  @Prop({
    default: ExpertVerificationPhase.NotVerified,
    enum: ExpertVerificationPhase,
  })
  expertVerificationPhase: ExpertVerificationPhase;
}

@Schema()
export class Pattern extends Document {
  @Prop({ required: true })
  patternType: string;

  @Prop({ required: true })
  websiteId: string;

  @Prop({ required: true })
  isAutoGenerated: boolean;

  @Prop()
  description: string;

  @Prop()
  patternImageKeys?: string[];

  @Prop()
  detectedUrl: string;

  @Prop({ default: PatternPhaseType.InProgress, enum: PatternPhaseType })
  patternPhase: PatternPhaseType;

  @Prop()
  isPatternExists: boolean;

  @Prop()
  createdByExpertId: string;

  @Prop({ type: [Verification] })
  expertVerifications: Verification[];

  @Prop({ type: [CommentSchema] })
  comments: Comment[];

  @Prop({ default: Date.now, type: Date })
  createdAt: Date;
}

export const PatternSchema = SchemaFactory.createForClass(Pattern);
