import { Website } from '../schemas/website.schema';
import { WebsiteResponseDto } from '../dto/website-response.dto';
import { Injectable, Logger } from '@nestjs/common';
import { Pattern, Verification } from '../schemas/pattern.schema';
import { PatternResponseDto } from '../dto/pattern-response.dto';
import { ExpertVerificationDto } from '../dto/expert-verification.dto';
import { Comment, Reply } from '../schemas/comment.schema';
import { CommentResponseDto } from '../dto/comment-response.dto';
import { ReplyResponseDto } from '../dto/reply-response.dto';
import { WebsiteValidation } from '../validation/website.validation';
import { ConfigService } from '@nestjs/config';
import { AwsHelper } from '../../aws/aws.helper';

@Injectable()
export class WebsiteConverter {
  private readonly logger = new Logger(WebsiteConverter.name);
  constructor(
    private configService: ConfigService,
    private readonly awsHelper: AwsHelper,
    private readonly websiteValidation: WebsiteValidation,
  ) {}

  private async getUserName(userId: string) {
    const user = await this.websiteValidation.checkUserExists(userId);
    return user.firstName + ' ' + user.lastName;
  }

  async fetchImageFromPattern(patternId: string) {
    const pattern = await this.websiteValidation.checkPatternExists(patternId);
    const bucketName = this.configService.get<string>('AWS_S3_BUCKET');

    const patternImageUrls = await Promise.all(
      pattern.patternImageKeys.map(async (key) => {
        const params = {
          Bucket: bucketName,
          Key: key,
        };

        return await this.awsHelper.executeGetObjectCommand(params);
      }),
    );

    return { patternImageUrls };
  }

  async convertToWebsiteResponseDto(
    website: Website,
  ): Promise<WebsiteResponseDto> {
    const expertDetailsPromises = website.expertIds.map(async (expertId) => {
      return {
        id: expertId,
        name: await this.getUserName(expertId),
      };
    });

    const expertDetails = await Promise.all(expertDetailsPromises);
    return {
      websiteId: website._id,
      baseUrl: website.baseUrl,
      websiteName: website.websiteName,
      userId: website.userId,
      additionalUrls: website.additionalUrls,
      description: website.description,
      isCompleted: website.isCompleted,
      phase: website.phase,
      createdAt: website.createdAt,
      isDarkPatternFree: website.isDarkPatternFree,
      expertFeedback: website.expertFeedback,
      expertDetails: expertDetails,
      primaryExpertId: website.primaryExpertId,
      certificationId: website.certificationId,
    };
  }

  async convertPatternToDto(
    pattern: Pattern,
    commentsRequired: boolean,
  ): Promise<PatternResponseDto> {
    const urls = await this.fetchImageFromPattern(pattern._id);
    return {
      id: pattern._id,
      patternType: pattern.patternType,
      websiteId: pattern.websiteId,
      isAutoGenerated: pattern.isAutoGenerated,
      description: pattern.description,
      detectedUrl: pattern.detectedUrl,
      patternImageUrls: urls.patternImageUrls,
      patternPhase: pattern.patternPhase,
      isPatternExists: pattern.isPatternExists,
      createdByExpertId: pattern.createdByExpertId,
      expertName: await this.getUserName(pattern.createdByExpertId),
      expertVerifications: await Promise.all(
        pattern.expertVerifications.map((verification) =>
          this.convertVerificationsToDto(verification),
        ),
      ),
      createdAt: pattern.createdAt,
      comments: commentsRequired
        ? await Promise.all(
            pattern.comments.map((comment) =>
              this.convertCommentToDto(comment),
            ),
          )
        : [],
    };
  }

  async convertVerificationsToDto(
    verification: Verification,
  ): Promise<ExpertVerificationDto> {
    return {
      expertId: verification.expertId,
      expertName: await this.getUserName(verification.expertId),
      expertVerificationPhase: verification.expertVerificationPhase,
    };
  }

  async convertCommentToDto(comment: Comment): Promise<CommentResponseDto> {
    return {
      id: comment._id,
      websiteId: comment.websiteId,
      patternId: comment.patternId,
      expertId: comment.expertId,
      expertName: await this.getUserName(comment.expertId),
      content: comment.content,
      createdAt: comment.createdAt,
      replies: await Promise.all(
        comment.replies.map((reply) => this.convertReplyToDto(reply)),
      ),
    };
  }

  async convertReplyToDto(reply: Reply): Promise<ReplyResponseDto> {
    return {
      expertId: reply.expertId,
      expertName: await this.getUserName(reply.expertId),
      content: reply.content,
      createdAt: reply.createdAt,
    };
  }
}
